"""
Aplica√ß√£o principal do m√≥dulo de gest√£o de clientes.
"""

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
import uvicorn
import os
import traceback # Importa√ß√£o do traceback

from app.database import create_tables
from app.routers import clientes

# Configura√ß√£o do lifespan da aplica√ß√£o
@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gerencia o ciclo de vida da aplica√ß√£o.
    """
    # Startup: Cria as tabelas do banco de dados
    print("üöÄ Iniciando aplica√ß√£o...")
    # create_tables()
    # print("‚úÖ Tabelas do banco de dados criadas/verificadas")
    
    yield
    
    # Shutdown
    print("üõë Encerrando aplica√ß√£o...")

# Cria√ß√£o da aplica√ß√£o FastAPI
app = FastAPI(
    title="Sistema de Gest√£o MMQ - M√≥dulo Clientes",
    description="""
    API para gest√£o de clientes do Sistema de Gest√£o de Lojas.
    
    ## Funcionalidades
    
    * **Clientes**: CRUD completo para gest√£o de clientes
    * **Busca**: Busca avan√ßada por m√∫ltiplos crit√©rios
    * **Filtros**: Filtros por tipo, status, localiza√ß√£o
    * **Estat√≠sticas**: Relat√≥rios e estat√≠sticas de clientes
    
    ## Tipos de Cliente
    
    * **Pessoa F√≠sica**: Clientes individuais (CPF)
    * **Pessoa Jur√≠dica**: Empresas e organiza√ß√µes (CNPJ)
    
    ## Status do Cliente
    
    * **Ativo**: Cliente ativo no sistema
    * **Inativo**: Cliente inativo (soft delete)
    * **Bloqueado**: Cliente bloqueado por algum motivo
    """,
    version="0.07.0",
    contact={
        "name": "Sistema de Gest√£o de Lojas",
        "email": "comercial@coredatacenter.com.br",
    },
    license_info={
        "name": "MIT",
    },
    lifespan=lifespan
)

# Configura√ß√£o do CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware para tratamento de erros globais
@app.middleware("http")
async def error_handling_middleware(request: Request, call_next):
    """
    Middleware para tratamento global de erros.
    """
    try:
        response = await call_next(request)
        return response
    except Exception as e:
        print("--- ERRO INTERNO DETALHADO ---")
        traceback.print_exc() # <-- CORRE√á√ÉO PARA MOSTRAR O ERRO COMPLETO
        print("---------------------------------")
        return JSONResponse(
            status_code=500,
            content={
                "detail": "Erro interno do servidor",
                "error_code": "INTERNAL_SERVER_ERROR",
                "timestamp": "2024-01-01T00:00:00Z"
            }
        )

# Inclus√£o dos routers
app.include_router(clientes.router, prefix="/api/v1")

# Endpoint de health check
@app.get("/", tags=["health"])
async def root():
    """
    Endpoint de health check da aplica√ß√£o.
    """
    return {
        "message": "Sistema de Gest√£o de Lojas - M√≥dulo Clientes",
        "version": "1.0.0",
        "status": "healthy",
        "docs": "/docs"
    }

@app.get("/health", tags=["health"])
async def health_check():
    """
    Endpoint detalhado de health check.
    """
    return {
        "status": "healthy",
        "service": "clientes-api",
        "version": "1.0.0",
        "environment": os.getenv("ENVIRONMENT", "development"),
        "database": "connected"
    }

# Configura√ß√£o para execu√ß√£o direta
if __name__ == "__main__":
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
