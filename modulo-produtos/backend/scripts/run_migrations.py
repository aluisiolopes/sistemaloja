#!/usr/bin/env python3
"""
Script para gerenciar migra√ß√µes do banco de dados do m√≥dulo de produtos.
"""

import os
import sys
import subprocess
from pathlib import Path

# Adicionar o diret√≥rio pai ao path
sys.path.append(str(Path(__file__).parent.parent))

def run_command(command, description):
    """Executa um comando e retorna o resultado."""
    print(f"\n{description}...")
    print(f"Executando: {command}")
    
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, cwd=Path(__file__).parent.parent)
        
        if result.returncode == 0:
            print("‚úÖ Sucesso!")
            if result.stdout:
                print(result.stdout)
            return True
        else:
            print("‚ùå Erro!")
            if result.stderr:
                print(f"Erro: {result.stderr}")
            if result.stdout:
                print(f"Output: {result.stdout}")
            return False
            
    except Exception as e:
        print(f"‚ùå Exce√ß√£o ao executar comando: {e}")
        return False

def show_migration_status():
    """Mostra o status atual das migra√ß√µes."""
    return run_command("alembic current", "Verificando status atual das migra√ß√µes")

def show_migration_history():
    """Mostra o hist√≥rico de migra√ß√µes."""
    return run_command("alembic history --verbose", "Mostrando hist√≥rico de migra√ß√µes")

def upgrade_to_head():
    """Executa todas as migra√ß√µes pendentes."""
    return run_command("alembic upgrade head", "Executando migra√ß√µes pendentes")

def downgrade_one_step():
    """Desfaz a √∫ltima migra√ß√£o."""
    return run_command("alembic downgrade -1", "Desfazendo √∫ltima migra√ß√£o")

def create_new_migration():
    """Cria uma nova migra√ß√£o baseada nas mudan√ßas nos modelos."""
    message = input("Digite uma mensagem para a migra√ß√£o: ").strip()
    if not message:
        print("Mensagem √© obrigat√≥ria!")
        return False
    
    return run_command(f'alembic revision --autogenerate -m "{message}"', "Criando nova migra√ß√£o")

def create_empty_migration():
    """Cria uma migra√ß√£o vazia."""
    message = input("Digite uma mensagem para a migra√ß√£o vazia: ").strip()
    if not message:
        print("Mensagem √© obrigat√≥ria!")
        return False
    
    return run_command(f'alembic revision -m "{message}"', "Criando migra√ß√£o vazia")

def show_menu():
    """Mostra o menu de op√ß√µes."""
    print("\n" + "="*60)
    print("üóÑÔ∏è  GERENCIADOR DE MIGRA√á√ïES - M√ìDULO DE PRODUTOS")
    print("="*60)
    print("1. üìä Mostrar status atual das migra√ß√µes")
    print("2. üìú Mostrar hist√≥rico de migra√ß√µes")
    print("3. ‚¨ÜÔ∏è  Executar migra√ß√µes pendentes (upgrade)")
    print("4. ‚¨áÔ∏è  Desfazer √∫ltima migra√ß√£o (downgrade)")
    print("5. üÜï Criar nova migra√ß√£o (autogenerate)")
    print("6. üìù Criar migra√ß√£o vazia")
    print("7. ‚ùå Sair")
    print("="*60)

def main():
    """Fun√ß√£o principal do script."""
    print("Bem-vindo ao Gerenciador de Migra√ß√µes!")
    
    # Verificar se estamos no diret√≥rio correto
    backend_dir = Path(__file__).parent.parent
    if not (backend_dir / "alembic.ini").exists():
        print("‚ùå Erro: Arquivo alembic.ini n√£o encontrado!")
        print("Certifique-se de estar executando este script do diret√≥rio backend.")
        return False
    
    while True:
        show_menu()
        
        try:
            choice = input("\nEscolha uma op√ß√£o (1-7): ").strip()
            
            if choice == "1":
                show_migration_status()
            elif choice == "2":
                show_migration_history()
            elif choice == "3":
                upgrade_to_head()
            elif choice == "4":
                confirm = input("‚ö†Ô∏è  Tem certeza que deseja desfazer a √∫ltima migra√ß√£o? (s/N): ").strip().lower()
                if confirm in ['s', 'sim', 'y', 'yes']:
                    downgrade_one_step()
                else:
                    print("Opera√ß√£o cancelada.")
            elif choice == "5":
                create_new_migration()
            elif choice == "6":
                create_empty_migration()
            elif choice == "7":
                print("üëã At√© logo!")
                break
            else:
                print("‚ùå Op√ß√£o inv√°lida! Escolha um n√∫mero de 1 a 7.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Saindo...")
            break
        except Exception as e:
            print(f"‚ùå Erro inesperado: {e}")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

